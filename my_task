FT-2599
SPIKE: How to implement permission checking at the sidecar proxy level

The sidecar proxy will check the authentication token.
It should also check if any permissions are required to run. It is expected that the permissions will be included in the authentication token 
For example, in order to run POST /v1/roles to insert a new role, the sidecar proxy should check that the user making that request has got the X permission (e.g. security.roles.control.create). If that's the case, then it should go ahead. If not, it should return 403 forbidden.
This spike is to think of a strategy to accomplish that. E.g. is it sufficient to create a list of endpoints along with pathnames, and a list of permissions required to fulfill the request? What happens with situations where we want to say a user is allowed to manage their own resources, but nobody else's, unless they are administrators and have X permission e.g. security.sessions.control.update-all? Consider that permissions may come with wildcards as well e.g. a role may have the security.*.read.* permission, which means it is allowed to read all the information related to resources but not write or delete.



FT-2598
A sidecar proxy validates the authentication token	

Helm charts are updated so when the aor manager and the role manager are deployed, the sidecar proxys are deployed too
Within the cluster, trying to call the aor manager or role manager without a user returns 401 unauthorised.
If the token has been tampered, return 400 bad request
There is documentation available for other teams to take this sidecar and deploy it along with their own services



Clones FT-2537 UAA password is in clear text in the yaml file

UAA password is in clear text in the yaml file
Can we have it as an environment variable, for example? Or encrypted in the file?

enrique.canocarballa enrique.canocarballa added a comment - 4 hours ago
Related issue: https://github.com/cloudfoundry/uaa/issues/904

